{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _JSXStyle from \"styled-jsx/style\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { increment, decrement, reset } from '../redux/tickers/actions';\n\nvar Counter = /*#__PURE__*/function (_Component) {\n  _inherits(Counter, _Component);\n\n  var _super = _createSuper(Counter);\n\n  function Counter() {\n    var _this;\n\n    _classCallCheck(this, Counter);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"increment\", function () {\n      _this.props.dispatch(increment());\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"decrement\", function () {\n      _this.props.dispatch(decrement());\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"reset\", function () {\n      _this.props.dispatch(reset());\n    });\n\n    return _this;\n  }\n\n  _createClass(Counter, [{\n    key: \"render\",\n    value: function render() {\n      var count = this.props.count;\n      return __jsx(\"div\", {\n        className: \"jsx-2435724200\"\n      }, __jsx(_JSXStyle, {\n        id: \"2435724200\"\n      }, [\"div.jsx-2435724200{padding:0 0 20px 0;}\"]), __jsx(\"h1\", {\n        className: \"jsx-2435724200\"\n      }, \"Count: \", __jsx(\"span\", {\n        className: \"jsx-2435724200\"\n      }, count)), __jsx(\"button\", {\n        onClick: this.increment,\n        className: \"jsx-2435724200\"\n      }, \"+1\"), __jsx(\"button\", {\n        onClick: this.decrement,\n        className: \"jsx-2435724200\"\n      }, \"-1\"), __jsx(\"button\", {\n        onClick: this.reset,\n        className: \"jsx-2435724200\"\n      }, \"Reset\"));\n    }\n  }]);\n\n  return Counter;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  var _state$TestReducer = state.TestReducer,\n      TestReducer = _state$TestReducer === void 0 ? {} : _state$TestReducer;\n  var _TestReducer$count = TestReducer.count,\n      count = _TestReducer$count === void 0 ? 0 : _TestReducer$count;\n  return {\n    count: count\n  };\n};\n\nexport default connect(mapStateToProps)(Counter);","map":null,"metadata":{},"sourceType":"module"}